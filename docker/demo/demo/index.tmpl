<html>
<h3> IsaNLP SRL FrameBank demo </h3>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<body onload="visualize();">

<div id = "window">
<link rel="stylesheet" type="text/css" href="$____BRAT_URL____style-vis.css"/>

<form action="./wui.py" method="post" accept-charset="UTF-8">
Text: <p><textarea rows="10" cols="70" name="text">$____TEXT____</textarea></p>

<br>

<input type="submit" value="Submit">
</form>

<br>

Result: <br>
<div id = "visual_syn">
</div>

<br>

<div id = "visual_sem">
</div>

<div id="commentpopup"/>

<br>
<br>

</window>
</body>
</html>

<script type="text/javascript" src="$____BRAT_URL____client/lib/head.load.min.js"></script>

<script charset="UTF-8">

function visualize () {

var bratLocation = '$____BRAT_URL____';
head.js(
    // External libraries
    bratLocation + 'client/lib/jquery.min.js',
    bratLocation + 'client/lib/jquery.svg.min.js',
    bratLocation + 'client/lib/jquery.svgdom.min.js',

    // brat helper modules
    bratLocation + 'client/src/configuration.js',
    bratLocation + 'client/src/util.js',
    bratLocation + 'client/src/annotation_log.js',
    bratLocation + 'client/lib/webfont.js',

    // brat modules
    bratLocation + 'client/src/dispatcher.js',
    bratLocation + 'client/src/url_monitor.js',
    bratLocation + 'client/src/visualizer.js',
    bratLocation + 'client/src/visualizer_ui.js'
);

var webFontURLs = [
    bratLocation + 'static/fonts/Astloch-Bold.ttf',
    bratLocation + 'static/fonts/PT_Sans-Caption-Web-Regular.ttf',
    bratLocation + 'static/fonts/Liberation_Sans-Regular.ttf'
];

var spanTypes = null;
var relationTypesHash = null;
var dispatcher = null;
var displayCommentTimer = null;
var commentPopup = null;
var commentDisplayed = false;
var normServerDbByNormDbName = {};


var my_spanAndAttributeTypesLoaded = function(_spanTypes, _entityAttributeTypes, _eventAttributeTypes, _relationTypesHash) {
        spanTypes = _spanTypes;
        relationTypesHash = _relationTypesHash;
};


var adjustToCursor = function(evt, element, offset, top, right) {
    // get the real width, without wrapping
    element.css({ left: 0, top: 0 });
    var screenHeight = $(window).height();
    var screenWidth = $(window).width();
    // FIXME why the hell is this 22 necessary?!?
    var elementHeight = element.height() + 22;
    var elementWidth = element.width() + 22;
    var x, y;
    offset = offset || 0;
    if (top) {
      y = evt.clientY - elementHeight - offset;
      if (y < 0) top = false;
    }
    if (!top) {
      y = evt.clientY + offset;
    }
    if (right) {
      x = evt.clientX + offset;
      if (x >= screenWidth - elementWidth) right = false;
    }
    if (!right) {
      x = evt.clientX - elementWidth - offset;
    }
    if (y < 0) y = 0;
    if (x < 0) x = 0;
    element.css({ top: y, left: x });
};


var my_onMouseMove = function(evt) {
    if (commentDisplayed) {
      adjustToCursor(evt, commentPopup, 10, true, true);
      commentPopup.hide();
    }
};


var displayComment = function(evt, target, comment, commentText, commentType, immediately) {
    var idtype;
    if (commentType) {
      // label comment by type, with special case for default note type
      var commentLabel;
      if (commentType == 'AnnotatorNotes') {
        commentLabel = '<b>Note:</b> ';
      } else {
        commentLabel = '<b>'+Util.escapeHTML(commentType)+':</b> ';
      }
      comment += commentLabel + Util.escapeHTMLwithNewlines(commentText);
      idtype = 'comment_' + commentType;
    }
    commentPopup[0].className = idtype;
    commentPopup.html(comment);
    adjustToCursor(evt, commentPopup, 10, true, true);
    clearTimeout(displayCommentTimer);
    /* slight "tooltip" delay to allow highlights to be seen
       before the popup obstructs them. */
    displayCommentTimer = setTimeout(function() {
      commentPopup.stop(true, true).fadeIn();
      commentDisplayed = true;
    }, immediately ? 0 : 500);
};


var my_displaySpanComment = function(evt, target, spanId, spanType, mods, spanText, commentText, commentType, normalizations) {
    var immediately = false;
    var comment = ( '<div><span class="comment_type_id_wrapper">' +
                    '<span class="comment_type">' +
                    Util.escapeHTML(Util.spanDisplayForm(spanTypes,
                                                         spanType)) +
                    '</span>' +
                    ' ' +
                    '<span class="comment_id">' +
                    'ID:'+Util.escapeHTML(spanId) +
                    '</span></span>' );
    if (mods.length) {
      comment += '<div>' + Util.escapeHTML(mods.join(', ')) + '</div>';
    }

    comment += '</div>';
    comment += ('<div class="comment_text">"' + 
                Util.escapeHTML(spanText) + 
                '"</div>');
    var validArcTypesForDrag = dispatcher.post('getValidArcTypesForDrag', [spanId, spanType]);
    if (validArcTypesForDrag && validArcTypesForDrag[0]) {
      if (validArcTypesForDrag[0].length) {
        comment += '<div>' + validArcTypesForDrag[0].join(', ') + '</div>';
      } else {
        $('rect[data-span-id="' + spanId + '"]').addClass('badTarget');
      }
      immediately = true;
    }
    // process normalizations
    var normsToQuery = [];
    $.each(normalizations, function(normNo, norm) {
      var dbName = norm[0], dbKey = norm[1];
      //comment += ( '<hr/>' +
      //             '<span class="comment_id">' +
      //             Util.escapeHTML(dbName) + ':' +
      //             Util.escapeHTML(dbKey) + '</span>');
      if (dbName in normServerDbByNormDbName &&
          normServerDbByNormDbName[dbName] != '<NONE>') {
        // DB available, add drop-off point to HTML and store
        // query parameters
        commentPopupNormInfoSeqId++;
        comment += ('<br/><div id="norm_info_drop_point_'+
                    commentPopupNormInfoSeqId+'"/>');
        normsToQuery.push([dbName, dbKey, commentPopupNormInfoSeqId]);
      } else {
        // no DB, just attach "human-readable" text provided
        // with the annotation, if any
        if (norm[2]) {
            comment += ('<hr/><span class="norm_info_value">'+
                        Util.escapeHTML(norm[2])+'</span>');
        }
      }
    });

    // display initial comment HTML 
    displayComment(evt, target, comment, commentText, commentType, 
                   immediately);

    // initiate AJAX calls for the normalization data to query
    $.each(normsToQuery, function(normqNo, normq) {
      // TODO: cache some number of most recent norm_get_data results
      var dbName = normq[0], dbKey = normq[1], infoSeqId = normq[2];
      dispatcher.post('ajax', [{
        action: 'normData',
        database: dbName,
        key: dbKey,
        collection: coll,
      },
      function(response) {
        if (response.exception) {
          ; // TODO: response to error
        } else if (!response.value) {
          ; // TODO: response to missing key
        } else {
          // extend comment popup with normalization data
          norminfo = '';
          // flatten outer (name, attr, info) array (idx for sort)
          infos = [];
          var idx = 0;
          for (var i = 0; i < response.value.length; i++) {
            for (var j = 0; j < response.value[i].length; j++) {
              var label = response.value[i][j][0];
              var value = response.value[i][j][1];
              infos.push([label, value, idx++]);
            }
          }
          // sort, prioritizing images (to get floats right)
          infos = infos.sort(normInfoSortFunction);
          // generate HTML
          for (var i = 0; i < infos.length; i++) {
            var label = infos[i][0];
            var value = infos[i][1];
            if (label && value) {
              // special treatment for some label values
              if (label.toLowerCase() == '<img>') {
                // image
                norminfo += ('<img class="norm_info_img" src="'+
                             value+
                             '"/>');
              } else {
                // normal, as text

                // max length restriction
                if (value.length > 300) {
                  value = value.substr(0, 300) + ' ...';
                }                          

                norminfo += ('<span class="norm_info_label">'+
                             Util.escapeHTML(label)+
                             '</span>'+
                             '<span class="norm_info_value">'+':'+
                             Util.escapeHTML(value)+
                             '</span>'+
                             '<br/>');
              }
            }
          }
          var drop=$('#norm_info_drop_point_'+infoSeqId);
          if (drop) {
            drop.html(norminfo);
          } else {
            console.log('norm info drop point not found!'); //TODO XXX
          }
        }
      }]);
    });
};


var myEmbed = function(container, collData, docData, webFontURLs) {
    $(document).ready(function () { commentPopup = $("#commentpopup"); })

    dispatcher = new Dispatcher();
    var visualizer = new Visualizer(dispatcher, container, webFontURLs);
    docData.collection = null;
    dispatcher.on('spanAndAttributeTypesLoaded', my_spanAndAttributeTypesLoaded)
    dispatcher.on('displaySpanComment', my_displaySpanComment)
    dispatcher.on('mousemove', my_onMouseMove)
    dispatcher.post('collectionLoaded', [collData]);
    dispatcher.post('requestRenderData', [docData]);
    return dispatcher;
};

    var collData = $____COL_DATA_SYN____
    var docData = $____DOC_DATA_SYN____

    head.ready(function() {
        myEmbed(
            // id of the div element where brat should embed the visualisations
            'visual_syn',
            // object containing collection data
            collData,
            // object containing document data
            docData,
            // Array containing locations of the visualisation fonts
            webFontURLs
            );
    });

    var collDataSem = $____COL_DATA_SEM____
    var docDataSem = $____DOC_DATA_SEM____

    head.ready(function() {
        Util.embed(
            // id of the div element where brat should embed the visualisations
            'visual_sem',
            // object containing collection data
            collDataSem,
            // object containing document data
            docDataSem,
            // Array containing locations of the visualisation fonts
            webFontURLs
            );
    });
}

</script>
